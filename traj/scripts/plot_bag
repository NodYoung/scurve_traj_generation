#!/usr/bin/env python
from matplotlib import pyplot as plt
import numpy as np
import rosbag
import sys


def compute_discrete_derivatives(positions, itp=0.008):
    velocities = [np.zeros((NUM_JOINTS,))]
    accelerations = [np.zeros((NUM_JOINTS,))]
    jerks = [np.zeros((NUM_JOINTS,))]
    for point_i in range(1, len(positions)):
        velocities.append((positions[point_i] - positions[point_i - 1]) / itp)
        accelerations.append((velocities[point_i] - velocities[point_i - 1]) / itp)
        jerks.append((accelerations[point_i] - accelerations[point_i - 1]) / itp)
    return np.array(velocities), np.array(accelerations), np.array(jerks)


def plot_discrete_trajectory(times, positions, velocities, accelerations, jerks, title=None):
    figure = plt.gcf()
    axes = figure.subplots(4, sharex=True)
    if title is not None:
        figure.suptitle(title)
    num_joints = positions.shape[1]
    for joint_i in range(num_joints):
        c = joint_colors[joint_i]
        axes[0].plot(times, positions[:, joint_i], c=c, label='joint_{}'.format(joint_i + 1))
        axes[0].set_ylabel('position')
        axes[1].plot(times, velocities[:, joint_i], c=c, label='joint_{}'.format(joint_i + 1))
        axes[1].set_ylabel('velocity')
        axes[2].plot(times, accelerations[:, joint_i], c=c, label='joint_{}'.format(joint_i + 1))
        axes[2].set_ylabel('acceleration')
        axes[3].plot(times, jerks[:, joint_i], c=c, label='joint_{}'.format(joint_i + 1))
        axes[3].set_ylabel('jerk')
    figure.legend()


# Control cycle time on the robot controller.
ITP = 0.008

NUM_JOINTS = 6

joint_colors = ['r', 'b', 'g', 'c', 'm', 'y', 'k', 'w']

goal_msg = None
command_times = []
command_positions = []
bag = rosbag.Bag(sys.argv[1])
for topic, msg, t in bag.read_messages():
    if msg._type == 'fanuc_j519_msgs/Command':
        command_times.append(msg.header.stamp.to_sec())
        command_positions.append(np.deg2rad(msg.axes_data[:NUM_JOINTS]))
    elif msg._type == 'control_msgs/FollowJointTrajectoryActionGoal':
        goal_msg = msg.goal
bag.close()
command_times = np.array(command_times)
command_positions = np.array(command_positions)

command_velocities, command_accelerations, command_jerks = compute_discrete_derivatives(command_positions, ITP)
plot_discrete_trajectory(command_times, command_positions, command_velocities, command_accelerations, command_jerks)

if goal_msg is not None:
    goal_times = (np.array(
        [p.time_from_start.to_sec() for p in goal_msg.trajectory.points]) + goal_msg.trajectory.header.stamp.to_sec())
    goal_positions = np.array([p.positions for p in goal_msg.trajectory.points])
    goal_velocities, goal_accelerations, goal_jerks = compute_discrete_derivatives(goal_positions, ITP)
    plt.figure()
    plot_discrete_trajectory(goal_times, goal_positions, goal_velocities, goal_accelerations, goal_jerks,
                             'Goal trajectory')

plt.show()
