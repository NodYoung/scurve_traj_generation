#!/usr/bin/env python
from matplotlib import pyplot as plt
import numpy as np
import rosbag
import sys


def compute_discrete_derivatives(positions, itp=0.008):
    velocities = [np.zeros((NUM_JOINTS,))]
    accelerations = [np.zeros((NUM_JOINTS,))]
    jerks = [np.zeros((NUM_JOINTS,))]
    for point_i in range(1, len(positions)):
        velocities.append((positions[point_i] - positions[point_i - 1]) / itp)
        accelerations.append((velocities[point_i] - velocities[point_i - 1]) / itp)
        jerks.append((accelerations[point_i] - accelerations[point_i - 1]) / itp)
    return np.array(velocities), np.array(accelerations), np.array(jerks)


def plot_discrete_trajectory(axes, times, positions, velocities, accelerations, jerks, label, color='b', marker='.'):
    num_joints = positions.shape[1]
    axes[0, 0].set_ylabel('position')
    axes[1, 0].set_ylabel('velocity')
    axes[2, 0].set_ylabel('acceleration')
    axes[3, 0].set_ylabel('jerk')
    for joint_i in range(num_joints):
        c = joint_colors[joint_i]
        axes[0, joint_i].plot(times, positions[:, joint_i], c=color, marker=marker, label=label)
        axes[1, joint_i].plot(times, velocities[:, joint_i], c=color, marker=marker, label=label)
        axes[2, joint_i].plot(times, accelerations[:, joint_i], c=color, marker=marker, label=label)
        axes[3, joint_i].plot(times, jerks[:, joint_i], c=color, marker=marker, label=label)
        axes[3, joint_i].set_xlabel('joint_{}'.format(joint_i + 1))


# Control cycle time on the robot controller.
ITP = 0.008

NUM_JOINTS = 6

joint_colors = ['r', 'b', 'g', 'c', 'm', 'y', 'k', 'w']

goal_msg = None
command_times = []
command_positions = []
state_times = []
state_positions = []
bag = rosbag.Bag(sys.argv[1])
for topic, msg, t in bag.read_messages():
    if msg._type == 'fanuc_j519_msgs/Command':
        command_times.append(msg.header.stamp.to_sec())
        command_positions.append(np.deg2rad(msg.axes_data[:NUM_JOINTS]))
    elif msg._type == 'control_msgs/FollowJointTrajectoryActionGoal':
        goal_msg = msg.goal
    elif msg._type == 'fanuc_j519_msgs/RobotState':
        state_times.append(msg.header.stamp.to_sec())
        state_positions.append(np.deg2rad(msg.joint_pose[:NUM_JOINTS]))

bag.close()

command_times = np.array(command_times)
command_positions = np.array(command_positions)
state_times = np.array(state_times)
state_positions = np.array(state_positions)

# Subtracting off the start time so we have "time since beginning of data" instead of "time since 1970".
start_time = command_times[0]
command_times -= start_time
state_times -= start_time

command_velocities, command_accelerations, command_jerks = compute_discrete_derivatives(command_positions, ITP)
figure = plt.gcf()
figure.suptitle('Driver command and state')
axes = figure.subplots(4, NUM_JOINTS, squeeze=False, sharex=True, sharey='row')
plot_discrete_trajectory(axes, command_times, command_positions, command_velocities, command_accelerations,
                         command_jerks, 'Command', color='b')

state_velocities, state_accelerations, state_jerks = compute_discrete_derivatives(state_positions, ITP)
plot_discrete_trajectory(axes, state_times, state_positions, state_velocities, state_accelerations, state_jerks,
                         'State', color='r')
figure.legend()

if goal_msg is not None:
    goal_times = (np.array(
        [p.time_from_start.to_sec() for p in goal_msg.trajectory.points]) + goal_msg.trajectory.header.stamp.to_sec())
    goal_positions = np.array([p.positions for p in goal_msg.trajectory.points])
    goal_velocities, goal_accelerations, goal_jerks = compute_discrete_derivatives(goal_positions, ITP)
    figure = plt.figure()
    figure.suptitle('Goal trajectory')
    axes = figure.subplots(4, NUM_JOINTS, squeeze=False, sharex=True, sharey='row')
    plot_discrete_trajectory(axes, goal_times, goal_positions, goal_velocities, goal_accelerations, goal_jerks, 'Goal')

plt.show()
